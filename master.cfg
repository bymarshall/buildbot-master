import os
from buildbot import version
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth
from buildbot.status.html import WebStatus

from buildbot.schedulers import basic
from buildbot.schedulers.basic import SingleBranchScheduler

from buildbot.buildslave import BuildSlave

from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetPropertyFromCommand

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.filter import ChangeFilter

from buildbot.config import BuilderConfig

from buildbot.changes.filter import ChangeFilter
from buildbot.process.properties import WithProperties
from buildbot.process.factory import BuildFactory

if version == '0.8.9': # Debian Wheezy
    from buildbot.schedulers.forcesched import ForceScheduler
elif version == '0.8.12': # pip
    from buildbot.plugins import schedulers
    ForceScheduler = schedulers.ForceScheduler

# Configuracion principal del buildbot
c = BuildmasterConfig = {}

c['status'] = []
# informacion de los esclavos
c['slaves'] = []
# cambios en las fuentes
c['change_source'] = []
# horarios
c['schedulers'] = []
# constructores
c['builders'] = []
# Url local
c['buildbotURL'] = 'http://localhost:8010/'

c['protocols'] = {'pb': {'port': 9989}}

# Estructura de los paquetes que se van a construir
packages = {}
packages['list'] = filter(None, open('gitrepos.list', 'r').read().split('\n'))

vcs = {}
vcs['branch'] = 'master'
# Cada cuanto tiempo buildbot va a chequear un repositorio de git
vcs['time'] = 60
vcs['pollinterval'] = 60 

# Configuracion de los esclavos
slaves = {}
slaves['buildbot-amd64'] = {'arch':'amd64', 
                           'dist':'jessie',
                           'user':'buildbot-amd64',
                           'passwd':'bb64'}
slaves['buildbot-i386'] = {'arch':'i386', 
                           'dist':'jessie',
                           'user':'buildbot-i386',
                           'passwd':'bb64'}


# Creacion de supervisores de repositorios GIT para ver si hay cambios en los repos
for repo in packages['list']:
    package = os.path.basename(repo)
    if package.endswith('.git'):
        package = package.split('.')[0]
    c['change_source'].append(
        GitPoller(repourl=repo,
                  project=package,
                  branch=vcs['branch'],
                  pollinterval=vcs['pollinterval'])
        )

arch = {}

for s in slaves.keys():
    vm = slaves[s]
    arch[vm['arch']] = 1

for a in arch.keys():
    e = []
    for s in slaves.keys():
        if slaves[s]['arch'] == a:
            e.append(s)
    arch[a] = e

# Creacion de los controladores de los esclavos
for s in slaves.keys():
    c['slaves'].append(BuildSlave(slaves[s]['user'], slaves[s]['passwd']))

# Un constructor es una secuencia de pasos a seguir
builders = {}

for repo in packages['list']:
    for a in arch.keys():
        package = os.path.basename(repo)
        if package.endswith('.git'):
            package = package.split('.')[0]
        n = package + '-' + a
        def get_arch(props):
            return a
        builders[n] = arch[a]
        all_steps= [
            ShellCommand(command='rm -rf *'),
            ShellCommand(command=['git', 'clone', repo], workdir='build/', haltOnFailure = True),
            ShellCommand(command=['git', 'checkout', vcs['branch']], workdir='build/'+package),
            SetPropertyFromCommand(command = "dpkg-parsechangelog | grep-dctrl -esSource . | awk -F' ' '{print $2}'", property = 'pkgname', workdir='build/'+package, haltOnFailure = True),
            SetPropertyFromCommand(command = "dpkg-parsechangelog | grep-dctrl -esVersion . | awk -F' ' '{print $2}'", property = 'origver', workdir='build/'+package, haltOnFailure = True),
            #ShellCommand(command = WithProperties("tar --anchored --exclude-vcs --exclude './debian' -cvzf ../%(packagename)s_%(origver)s.orig.tar.gz --directory=$(pwd) ./"), workdir='build/'+package )
            ShellCommand(command = ['gbp', 'buildpackage', '--git-pbuilder', '--git-dist=jessie',
                '--git-upstream-tree='+vcs['branch'], '--git-arch='+a, '-us', '-uc'], workdir='build/'+package, env = {'DIST': 'jessie', 'ARCH': a}, haltOnFailure = True),

            #ShellCommand(command = WithProperties("sudo piuparts -d jessie %(pkgname)s_%(origver)s_%(arch)s.changes", arch=get_arch), workdir='build/', haltOnFailure = True)
            ShellCommand(command = WithProperties("lintian %(pkgname)s_%(origver)s_"+a+".changes"), workdir='build/', haltOnFailure = True),
            ShellCommand(command = WithProperties("dupload --nomail -t bbmaster %(pkgname)s_%(origver)s_"+a+".changes"), workdir='build/', haltOnFailure = False),

        ]
        f = BuildFactory(all_steps)
        c['builders'].append(BuilderConfig(name=n, factory=f, slavenames=arch[a]))


for builder in builders.keys():
    project = '-'.join(builder.split('-')[:-1])
    sbched = SingleBranchScheduler(name=builder,
        change_filter = ChangeFilter(project=project, branch='master'),
        treeStableTimer = 10,
        builderNames = [builder])
    # define the available schedulers
    c['schedulers'].append(sbched)

lb_steps = [
    ShellCommand(command='rm -rf lbconfig'),
    ShellCommand(command=['git', 'clone', 'https://github.com/overflow/canaima-lbconfig.git','lbconfig'], workdir='build/', haltOnFailure = True),
    ShellCommand(command = ['sudo','lb', 'build'], workdir='build/lbconfig', haltOnFailure = True)

]
for a in arch.keys():
    c['builders'].append(BuilderConfig(name='Generar ISO '+a, factory=BuildFactory(lb_steps), slavenames=arch[a]))
builders.update({'Generar ISO amd64':True, 'Generar ISO i386':True})
fsched = ForceScheduler(name='force', builderNames = [builder for builder in builders.keys()])
c['schedulers'].append(fsched)

authz_cfg = Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=BasicAuth([('pyflakes','pyflakes')]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

c['status'].append(WebStatus(http_port=8010, authz=authz_cfg))


